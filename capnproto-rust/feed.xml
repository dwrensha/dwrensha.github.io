<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
        <channel>
                <title>Cap&#39;n Proto for Rust</title>
                <description>updates on capnproto-rust</description>
                <link>http://dwrensha.github.io/capnproto-rust</link>
                <atom:link href="http://dwrensha.github.io/capnproto-rust/feed.xml" rel="self" type="application/rss+xml" />
                
                        <item>
                                <title>unaligned memory access</title>
                                <description>&lt;p&gt;A core feature of capnproto-rust is its ability to
read messages directly from memory without copying the data into auxiliary structures.
Unfortunately, this functionality is a bit tricky to use correctly,
as can be seen in its primary interface, the
&lt;a href=&quot;https://github.com/capnproto/capnproto-rust/blob/d1988731887b2bbb0ccb35c68b9292d98f317a48/capnp/src/serialize.rs#L76-L81&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;read_message_from_words()&lt;/code&gt;&lt;/a&gt;
function, whose input is of type &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;[Word]&lt;/code&gt;.
In the common case where you want to read from a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;[u8]&lt;/code&gt;,
you must first call the unsafe function
&lt;a href=&quot;https://github.com/capnproto/capnproto-rust/blob/d1988731887b2bbb0ccb35c68b9292d98f317a48/capnp/src/lib.rs#L82-L88&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bytes_to_words()&lt;/code&gt;&lt;/a&gt;
in order to get a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;[Word]&lt;/code&gt;.
It is only safe to call this function if you know that your data is 8-byte aligned
or if you know that your code will only run on processors that permit unaligned memory access.
The former condition can be difficult to meet, especially if your memory comes from
an external library like sqlite or zmq where no alignment guarantees are given,
and the latter condition feels like an unfair burden, both in terms of demanding that
you understand a rather subtle concept, and in terms of limiting where your software can run.
So it’s easy to  understand why someone might shy away from calling &lt;code class=&quot;highlighter-rouge&quot;&gt;bytes_to_words()&lt;/code&gt;
and, in turn, &lt;code class=&quot;highlighter-rouge&quot;&gt;read_message_from_words()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Can we do better? Ideally, capnproto-rust would safely operate directly on input of type &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;[u8]&lt;/code&gt;.
We can in fact adapt the code to do that, but it comes at a cost: processors that don’t natively
support unaligned access will need to do some more work every time that capnproto-rust
loads or stores a multi-byte value.
To get some idea of what that extra work looks like, let’s examine
the assembly code emitted by rustc!
(A better way to quantify the cost would be to perform controlled experiments on actual hardware,
but that’s a more involved project than I’d like to tackle right now.)&lt;/p&gt;

&lt;p&gt;Below is some code representing a bare-bones simplification of the two approaches to memory access.
(The &lt;code class=&quot;highlighter-rouge&quot;&gt;#[no_std]&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;#[no_mangle]&lt;/code&gt; attributes are to simpify the assembly code.)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;no_std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#[no_mangle]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unsafe&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;direct_load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;u8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u64&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.as_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.to_le&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#[no_mangle]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;indirect_load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;u8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u64&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nn&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_le_bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;direct_load()&lt;/code&gt; function represents the current state of affairs in capnproto-rust.
It loads a &lt;code class=&quot;highlighter-rouge&quot;&gt;u64&lt;/code&gt; by casting a pointer of type &lt;code class=&quot;highlighter-rouge&quot;&gt;*const u8&lt;/code&gt; to type &lt;code class=&quot;highlighter-rouge&quot;&gt;*const u64&lt;/code&gt; and then deferencing that pointer.
This is only safe if the input is 8-byte aligned or if the processor can handle unaligned access.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;indirect_load()&lt;/code&gt; function represents the safer alternative. We expect this to
sometimes require more work than &lt;code class=&quot;highlighter-rouge&quot;&gt;direct_load()&lt;/code&gt;, but it has the advantage of
being easier to use and understand.&lt;/p&gt;

&lt;p&gt;To compare the assembly code generated by these functions, I installed
a variety of rustc targets using &lt;code class=&quot;highlighter-rouge&quot;&gt;rustup&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rustup target add $TARGET
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;and then for each target compiled the code with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rustc -O --crate-type=lib test.rs --target=$TARGET --emit=asm
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The results, edited to only include the relevant bits of code, are show below.&lt;/p&gt;

&lt;h2 id=&quot;x8664-unknown-linux-gnu&quot;&gt;x86_64-unknown-linux-gnu&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;direct_load:
	movq	(%rdi), %rax
	retq

indirect_load:
	movq	(%rdi), %rax
	retq
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;i686-unknown-linux-gnu&quot;&gt;i686-unknown-linux-gnu&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;direct_load:
	movl	4(%esp), %ecx
	movl	(%ecx), %eax
	movl	4(%ecx), %edx
	retl

indirect_load:
	movl	4(%esp), %ecx
	movl	(%ecx), %eax
	movl	4(%ecx), %edx
	retl
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;aarch64-unknown-linux-gnu&quot;&gt;aarch64-unknown-linux-gnu&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;direct_load:
	ldr	x0, [x0]
	ret

indirect_load:
	ldr	x0, [x0]
	ret
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;wasm32-wasi&quot;&gt;wasm32-wasi&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;direct_load:
	local.get	0
	i64.load	0

indirect_load:
	local.get	0
	i64.load	0:p2align=0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;armv7-unknown-linux-gnueabi&quot;&gt;armv7-unknown-linux-gnueabi&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;direct_load:
	ldrd	r0, r1, [r0]
	bx	lr

indirect_load:
	ldr	r2, [r0]
	ldr	r1, [r0, #4]
	mov	r0, r2
	bx	lr
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;powerpc-unknown-linux-gnu&quot;&gt;powerpc-unknown-linux-gnu&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;direct_load:
	lwz 5, 0(3)
	lwz 4, 4(3)
	mr 3, 5
	blr

indirect_load:
	li 4, 4
	lwbrx 5, 3, 4
	lwbrx 4, 0, 3
	mr 3, 5
	blr
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;mips-unknown-linux-gnu&quot;&gt;mips-unknown-linux-gnu&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;direct_load:
	lw	$2, 0($4)
	lw	$3, 4($4)
	jr	$ra
	nop

indirect_load:
	lwl	$1, 4($4)
	lwr	$1, 7($4)
	wsbh	$1, $1
	rotr	$2, $1, 16
	lwl	$1, 0($4)
	lwr	$1, 3($4)
	wsbh	$1, $1
	jr	$ra
	rotr	$3, $1, 16
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;riscv32i-unknown-none-elf&quot;&gt;riscv32i-unknown-none-elf&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;direct_load:
	addi	sp, sp, -16
	sw	ra, 12(sp)
	sw	s0, 8(sp)
	addi	s0, sp, 16
	lw	a2, 0(a0)
	lw	a1, 4(a0)
	mv	a0, a2
	lw	s0, 8(sp)
	lw	ra, 12(sp)
	addi	sp, sp, 16
	ret

indirect_load:
	addi	sp, sp, -16
	sw	ra, 12(sp)
	sw	s0, 8(sp)
	addi	s0, sp, 16
	lbu	a1, 1(a0)
	slli	a1, a1, 8
	lbu	a2, 0(a0)
	or	a1, a1, a2
	lbu	a2, 3(a0)
	slli	a2, a2, 8
	lbu	a3, 2(a0)
	or	a2, a2, a3
	slli	a2, a2, 16
	or	a2, a2, a1
	lbu	a1, 5(a0)
	slli	a1, a1, 8
	lbu	a3, 4(a0)
	or	a1, a1, a3
	lbu	a3, 6(a0)
	lbu	a0, 7(a0)
	slli	a0, a0, 8
	or	a0, a0, a3
	slli	a0, a0, 16
	or	a1, a0, a1
	mv	a0, a2
	lw	s0, 8(sp)
	lw	ra, 12(sp)
	addi	sp, sp, 16
	ret
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h1&gt;

&lt;p&gt;As expected, &lt;code class=&quot;highlighter-rouge&quot;&gt;direct_load()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;indirect_load()&lt;/code&gt; generate the same
assembly code for many targets. These are presumably exactly the targets that support
unaligned memory access. On targets where different instructions were generated
for the two functions, &lt;code class=&quot;highlighter-rouge&quot;&gt;indirect_load()&lt;/code&gt; typically requires somewhere between 2x and 3x the
number of instructions of &lt;code class=&quot;highlighter-rouge&quot;&gt;direct_load()&lt;/code&gt;. Is that an acceptable cost? How much of an
impact would it have in the context of a complete real-world program? I don’t know!
I’m inclined to believe that the usability benefits of the
&lt;code class=&quot;highlighter-rouge&quot;&gt;indirect_load()&lt;/code&gt; approach outweigh its performance
cost, especially since that cost is probably zero or negligible on the most commonly used targets,
but maybe that’s not true?
I encourage any readers of this post who have thoughts on the matter to comment
on this &lt;a href=&quot;https://github.com/capnproto/capnproto-rust/issues/101&quot;&gt;github issue&lt;/a&gt;.&lt;/p&gt;
</description>
                                <pubDate>Sat, 11 Jan 2020 00:00:00 -0500</pubDate>
                                <link>http://dwrensha.github.io/capnproto-rust/2020/01/11/unaligned-memory-access.html</link>
                                <guid isPermaLink="true">http://dwrensha.github.io/capnproto-rust/2020/01/11/unaligned-memory-access.html</guid>
                        </item>
                
                        <item>
                                <title>async/await</title>
                                <description>&lt;p&gt;Today I’m releasing version 0.11.0 of capnproto-rust,
with support for
&lt;a href=&quot;https://blog.rust-lang.org/2019/11/07/Async-await-stable.html&quot;&gt;async/await&lt;/a&gt;!
The updated RPC system works with any futures-0.3-enabled executor
(e.g. tokio, async-std) – you just need to provide it
with objects that implement the &lt;code class=&quot;highlighter-rouge&quot;&gt;futures::io::AsyncRead&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;futures::io::AsyncWrite&lt;/code&gt; traits.&lt;/p&gt;

&lt;p&gt;The stabilization of &lt;code class=&quot;highlighter-rouge&quot;&gt;std::future::Future&lt;/code&gt; allowed me to eliminate
an annoying
&lt;a href=&quot;https://github.com/capnproto/capnproto-rust/commit/0e825eecbf2337d1fb2caed015bfa4862a195d40#diff-c0b507abb73596f7f82a1c80ac680e54L31&quot;&gt;optional dependecy&lt;/a&gt;
on futures-0.1
in the base &lt;code class=&quot;highlighter-rouge&quot;&gt;capnp&lt;/code&gt; crate, and in general the update allowed me to
&lt;a href=&quot;https://github.com/capnproto/capnproto-rust/commit/0e825eecbf2337d1fb2caed015bfa4862a195d40&quot;&gt;delete a lot of code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In my experience, async/await can vastly simplify concurrent programming,
especially in the case where you have a single-threaded event loop
and you want to share mutable data among multiple tasks.&lt;/p&gt;

&lt;p&gt;Probably the hardest part of this update was wrapping my head around &lt;code class=&quot;highlighter-rouge&quot;&gt;Pin&amp;lt;T&amp;gt;&lt;/code&gt;.
My biggest takeaway message on that topic is:
if you get into trouble, try wrapping your object with &lt;code class=&quot;highlighter-rouge&quot;&gt;Box::pin()&lt;/code&gt;.
Curiously, doing so will give you an object that is &lt;code class=&quot;highlighter-rouge&quot;&gt;Unpin&lt;/code&gt; – which is often
exactly what you need!&lt;/p&gt;

</description>
                                <pubDate>Fri, 06 Dec 2019 00:00:00 -0500</pubDate>
                                <link>http://dwrensha.github.io/capnproto-rust/2019/12/06/async-await.html</link>
                                <guid isPermaLink="true">http://dwrensha.github.io/capnproto-rust/2019/12/06/async-await.html</guid>
                        </item>
                
                        <item>
                                <title>cargo-fuzz findings</title>
                                <description>&lt;p&gt;After the
&lt;a href=&quot;https://www.reddit.com/r/rust/comments/5va0mi/cargofuzz_an_easy_way_to_fuzz_your_crates/&quot;&gt;announcement&lt;/a&gt;
of &lt;a href=&quot;https://github.com/rust-fuzz/cargo-fuzz&quot;&gt;cargo-fuzz&lt;/a&gt; last week,
I decided to try using it to search for bugs in capnproto-rust.
For a long time I had been meaning to try out
&lt;a href=&quot;https://github.com/rust-fuzz/afl.rs&quot;&gt;afl.rs&lt;/a&gt;,
a similar fuzz-testing tool about which I had heard lots of good things,
but its nontrivial setup costs were enough to deter me.
Fortunately, cargo-fuzz is very simple and fast to get running.
It quickly found several issues in capnproto-rust, all of which have been fixed
in the &lt;a href=&quot;https://crates.io/crates/capnp&quot;&gt;latest release&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;panic-on-invalid-input-fixed-in-6f9bbdcahttpsgithubcomdwrenshacapnproto-rustcommit6f9bbdca5f77146f6f1ff0297295c3fded3a01a6&quot;&gt;Panic on invalid input (fixed in &lt;a href=&quot;https://github.com/dwrensha/capnproto-rust/commit/6f9bbdca5f77146f6f1ff0297295c3fded3a01a6&quot;&gt;6f9bbdca&lt;/a&gt;)&lt;/h4&gt;

&lt;p&gt;The original
&lt;a href=&quot;https://github.com/sandstorm-io/capnproto/blob/01f6d5e4ff05fcd67e968b50120dba3fbbb38afb/c%2B%2B/src/capnp/layout.c%2B%2B#L1875&quot;&gt;C++ code&lt;/a&gt;
suggests that the branches for dealing with &lt;code class=&quot;highlighter-rouge&quot;&gt;Far&lt;/code&gt; pointers in
&lt;code class=&quot;highlighter-rouge&quot;&gt;total_size()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;copy_pointer()&lt;/code&gt; are unreachable,
so I had translated them into panics.
It turns out that these branches can in fact be reached
due to invalid input, rather than any bugs in the code.
In the C++ version, this means that a somewhat
misleading exception will be thrown;
I’ve submitted &lt;a href=&quot;https://github.com/sandstorm-io/capnproto/pull/421&quot;&gt;a pull request&lt;/a&gt;
to make the exception more accurate.
The problem is more serious in the Rust version,
because Rust makes a sharp distinction between panics and error &lt;code class=&quot;highlighter-rouge&quot;&gt;Result&lt;/code&gt;s.&lt;/p&gt;

&lt;h4 id=&quot;cpu-amplifications-fixed-in-e89f162bhttpsgithubcomdwrenshacapnproto-rustcommite89f162b3545096aec77a62157463437d6959ac5-66def413httpsgithubcomdwrenshacapnproto-rustcommit66def4134e8b4fbc2459d77e72717e445175879c&quot;&gt;CPU amplifications (fixed in &lt;a href=&quot;https://github.com/dwrensha/capnproto-rust/commit/e89f162b3545096aec77a62157463437d6959ac5&quot;&gt;e89f162b&lt;/a&gt;, &lt;a href=&quot;https://github.com/dwrensha/capnproto-rust/commit/66def4134e8b4fbc2459d77e72717e445175879c&quot;&gt;66def413&lt;/a&gt;)&lt;/h4&gt;

&lt;p&gt;One way to attempt to mount a denial-of-service attack on a
consumer of Cap’n Proto messages is to carefully craft messages
that could trick the consumer into doing lots of work. For example,
if you send a cyclic structure, the consumer might go into an infinite loop
trying to read it.
To protect against such attacks, message readers in capnproto-rust
have an adjustable traversal limit, indicating how many bytes
are allowed to be read before an error is returned.
Reads of zero-sized structs should also count against
this limit, as was observed in these
&lt;a href=&quot;https://github.com/sandstorm-io/capnproto/blob/f29bb0dafbe081960f9b508528138d5f99f83b7b/security-advisories/2015-03-02-2-all-cpu-amplification.md&quot;&gt;bug&lt;/a&gt;
&lt;a href=&quot;https://github.com/sandstorm-io/capnproto/blob/f29bb0dafbe081960f9b508528138d5f99f83b7b/security-advisories/2015-03-05-0-c%2B%2B-addl-cpu-amplification.md&quot;&gt;reports&lt;/a&gt;
for capnproto-c++ in 2015.
I thought that I had completely updated capnproto-rust with
fixes for this problem, but apparently I had missed two cases. :-(&lt;/p&gt;

&lt;h4 id=&quot;panics-on-todos-fixed-in-4c8d5f3httpsgithubcomdwrenshacapnproto-rustcommit4c8d5f369335dc6deef6f9d1e818da5d47e2a36d-77dc713bhttpsgithubcomdwrenshacapnproto-rustcommit77dc713b8486bf61fe657cb82f5d6cb351e76306-10f37267httpsgithubcomdwrenshacapnproto-rustcommit10f37267e3c94d861e946f91dada61fa4dc085ee-3521d4e2httpsgithubcomdwrenshacapnproto-rustcommit3521d4e25877d038154350d9ea5621779724ca5c&quot;&gt;Panics on TODOs (fixed in &lt;a href=&quot;https://github.com/dwrensha/capnproto-rust/commit/4c8d5f369335dc6deef6f9d1e818da5d47e2a36d&quot;&gt;4c8d5f3&lt;/a&gt;, &lt;a href=&quot;https://github.com/dwrensha/capnproto-rust/commit/77dc713b8486bf61fe657cb82f5d6cb351e76306&quot;&gt;77dc713b&lt;/a&gt;, &lt;a href=&quot;https://github.com/dwrensha/capnproto-rust/commit/10f37267e3c94d861e946f91dada61fa4dc085ee&quot;&gt;10f37267&lt;/a&gt;, &lt;a href=&quot;https://github.com/dwrensha/capnproto-rust/commit/3521d4e25877d038154350d9ea5621779724ca5c&quot;&gt;3521d4e2&lt;/a&gt;)&lt;/h4&gt;

&lt;p&gt;The fuzzer managed to find some explicit panics in capnproto-rust
that were filling in holes of unimplemented functionality.
I had forgotten that such holes still existed.
After cargo-fuzz found these,
I went ahead and implemented the functionality.
At first I was too lazy to write a test case to cover the new code,
but before going to bed that night I did
set up cargo-fuzz to run on it.
By the next morning, cargo-fuzz had found a memory safety issue
in the new code! Even better, the test case it generated
was rather clever and gave me a good starting point for writing the
&lt;a href=&quot;https://github.com/dwrensha/capnpc-rust/blob/4bd89ab2fccc1386b3b608a663e4adfbb199d695/test/test.rs#L772-L820&quot;&gt;test&lt;/a&gt;
that I later added to the capnproto-rust test suite to cover the new functionality.&lt;/p&gt;

</description>
                                <pubDate>Mon, 27 Feb 2017 00:00:00 -0500</pubDate>
                                <link>http://dwrensha.github.io/capnproto-rust/2017/02/27/cargo-fuzz.html</link>
                                <guid isPermaLink="true">http://dwrensha.github.io/capnproto-rust/2017/02/27/cargo-fuzz.html</guid>
                        </item>
                
                        <item>
                                <title>capnp-rpc-rust now uses futures-rs</title>
                                <description>&lt;p&gt;The concurrency story of
&lt;a href=&quot;https://crates.io/crates/capnp-rpc&quot;&gt;capnp-rpc-rust&lt;/a&gt;
gets a major update in today’s version 0.8 release.
Previously, the remote procedure call system was built
on top of &lt;a href=&quot;https://github.com/dwrensha/gj&quot;&gt;GJ&lt;/a&gt;,
an event loop framework designed specifically for Cap’n Proto,
described in some of my &lt;a href=&quot;/capnproto-rust/2015/05/25/asynchronous-io-with-promises.html&quot;&gt;previous&lt;/a&gt;
&lt;a href=&quot;/capnproto-rust/2016/01/11/async-rpc.html&quot;&gt;posts&lt;/a&gt;.
The new version drops GJ in favor of
&lt;a href=&quot;https://github.com/alexcrichton/futures-rs&quot;&gt;futures-rs&lt;/a&gt;,
a library that is quickly becoming the standard
foundation for asynchronous programming in Rust.&lt;/p&gt;

&lt;p&gt;At the level of types, the update is fairly
straightforward.
The main asynchronous building block in GJ is the struct
&lt;code class=&quot;highlighter-rouge&quot;&gt;Promise&amp;lt;T, E&amp;gt;&lt;/code&gt;, representing a &lt;code class=&quot;highlighter-rouge&quot;&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; that might not
be ready yet. To migrate to futures-rs, each &lt;code class=&quot;highlighter-rouge&quot;&gt;gj::Promise&amp;lt;T,E&amp;gt;&lt;/code&gt; can be translated into
a &lt;code class=&quot;highlighter-rouge&quot;&gt;Box&amp;lt;futures::Future&amp;lt;Item=T,Error=E&amp;gt;&amp;gt;&lt;/code&gt;,
and the high-level structure of a program usually does not need to change.&lt;/p&gt;

&lt;p&gt;Many nice properties derive from the fact that &lt;code class=&quot;highlighter-rouge&quot;&gt;Future&lt;/code&gt; is a &lt;em&gt;trait&lt;/em&gt;, not a struct,
and does not need to be put in a &lt;code class=&quot;highlighter-rouge&quot;&gt;Box&lt;/code&gt;.
Concrete types implementing &lt;code class=&quot;highlighter-rouge&quot;&gt;Future&lt;/code&gt; can be used in generics,
making it possible for combinators like &lt;code class=&quot;highlighter-rouge&quot;&gt;.then()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;.join()&lt;/code&gt;
to avoid heap allocations
and to avoid losing type information.
In particular, the typechecker can know at compile time
whether it is safe to send a future between threads!&lt;/p&gt;

&lt;p&gt;The Rust community has a growing ecosystem of libraries based on
futures-rs, and today’s capnp-rpc-rust release
should work well with all of them.
For example, a Cap’n Proto method could invoke
&lt;a href=&quot;https://crates.io/crates/futures-cpupool&quot;&gt;futures-cpupool&lt;/a&gt;
to distribute computation-heavy work among a pool of worker threads,
or it could use one of the emerging asynchronous database drivers
to make queries on a remote database, or it could do,
well, anything that can be expressed in terms of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Future&lt;/code&gt; trait.
As a quick demonstration, I have implemented a
simple &lt;a href=&quot;https://github.com/dwrensha/capnp-rpc-rust/tree/master/examples/http-requests&quot;&gt;example&lt;/a&gt;
that uses &lt;a href=&quot;https://github.com/tokio-rs/tokio-curl&quot;&gt;tokio-curl&lt;/a&gt;
to make asynchronous HTTP requests.&lt;/p&gt;

&lt;p&gt;There are many exciting possibilities to explore.
If any of this sounds interesting to you, I encourage you to get involved!
Join me for discussion at #sandstorm on freenode IRC or at the
&lt;a href=&quot;https://gitter.im/tokio-rs/tokio&quot;&gt;tokio gitter&lt;/a&gt;.&lt;/p&gt;

</description>
                                <pubDate>Wed, 04 Jan 2017 00:00:00 -0500</pubDate>
                                <link>http://dwrensha.github.io/capnproto-rust/2017/01/04/rpc-futures.html</link>
                                <guid isPermaLink="true">http://dwrensha.github.io/capnproto-rust/2017/01/04/rpc-futures.html</guid>
                        </item>
                
                        <item>
                                <title>async generators</title>
                                <description>&lt;p&gt;Until recently,
the concept of &lt;em&gt;generators&lt;/em&gt;, or &lt;em&gt;resumable functions&lt;/em&gt;,
seemed to me like a cute idea
with only niche use cases.
Sure, I had heard that generators
in &lt;a href=&quot;https://www.python.org/dev/peps/pep-0255/&quot;&gt;python&lt;/a&gt;
and
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#Generators&quot;&gt;javascript&lt;/a&gt;
could make certain things much nicer,
but how often does one really need to have
what appears to be nothing more than a fancy iterator?
It wasn’t until I followed
this &lt;a href=&quot;https://github.com/rust-lang/rfcs/issues/1081&quot;&gt;Rust RFC thread&lt;/a&gt;
that the true potential of generators in Rust started to dawn on me.
Today they are my personal number-one most-desired new feature for the language, mostly because I
believe they are the biggest missing piece in Rust’s async story.&lt;/p&gt;

&lt;p&gt;But how are generators relevant to async at all?&lt;/p&gt;

&lt;p&gt;To understand that, let’s first imagine what generators might look like in Rust.
We start with a trait definition (borrowed from eddyb’s comment in the above-linked thread):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Yield&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Generator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Yield&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So a generator looks a lot like an iterator. You can ask it for the next value
until you reach its end, signalled by &lt;code class=&quot;highlighter-rouge&quot;&gt;Return&lt;/code&gt;.
The interesting part is that there is a special way to construct
values that implement &lt;code class=&quot;highlighter-rouge&quot;&gt;Generator&lt;/code&gt;. For example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fib_with_sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u64&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.n&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// &amp;lt;--- new keyword &quot;yield&quot;&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here I’ve used some strawman syntax &lt;code class=&quot;highlighter-rouge&quot;&gt;fn foo() -&amp;lt;T&amp;gt;-&amp;gt; R&lt;/code&gt;, which denotes that &lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt;
is a &lt;em&gt;generator function&lt;/em&gt; that produces some number of &lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt; values
and then finishes by producing an &lt;code class=&quot;highlighter-rouge&quot;&gt;R&lt;/code&gt;.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;yield&lt;/code&gt; keyword inside of a generator function means that a &lt;code class=&quot;highlighter-rouge&quot;&gt;Yield::Value()&lt;/code&gt; should be produced
and the generator should be paused.
When you call &lt;code class=&quot;highlighter-rouge&quot;&gt;fib_with_sum()&lt;/code&gt;, the value you get back is a generator,
which can be used by calling &lt;code class=&quot;highlighter-rouge&quot;&gt;next()&lt;/code&gt;, like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fib_with_sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Yield::Value(0)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Yield::Value(1)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Yield::Value(1)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Yield::Value(2)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Yield::Value(3)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Yield::Return(7)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Another thing that we might want to do is to
have one generator delegate to another generator.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;yield from&lt;/code&gt; construction allows that:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sub_gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.n&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sub_gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
           &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Running this gives:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Yield::Value(0)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Yield::Value(0)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Yield::Value(1)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Yield::Value(0)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Yield::Value(1)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Yield::Value(2)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Yield::Return(3)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Note that when the sub-generator is done,
its return value gets plugged in at the &lt;code class=&quot;highlighter-rouge&quot;&gt;yield from&lt;/code&gt; expression of the
calling generator. So &lt;code class=&quot;highlighter-rouge&quot;&gt;gen()&lt;/code&gt; continues until &lt;code class=&quot;highlighter-rouge&quot;&gt;j == 3&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;using-generators-for-async-io&quot;&gt;Using generators for async I/O&lt;/h3&gt;

&lt;p&gt;Now for the punchline. Using generators, we can define
asynchronous reader and writer traits like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ErrorKind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AsyncStatus&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;Fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FileDescriptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;Timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;//...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AsyncWrite&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// Attempts to write all buf.len() bytes from buf into the&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// stream. Returns once all of the bytes have been written.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;u8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AsyncStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AsyncRead&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// Attempts to read buf.len() bytes from the stream,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// writing them into buf. Returns the number of bytes&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// actually read. Returns as soon as min_bytes are&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// read or EOF is encountered.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;try_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;u8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;min_bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;-&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AsyncStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;/// Like try_read(), but returns an error if EOF is&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// encountered before min_bytes can be read.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;u8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;min_bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;-&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AsyncStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;try!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.try_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min_bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min_bytes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
           &lt;span class=&quot;nf&quot;&gt;Err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;ErrorKind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UnexpectedEof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                          &lt;span class=&quot;nd&quot;&gt;format!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;expected {} but got {} bytes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                  &lt;span class=&quot;n&quot;&gt;min_bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
           &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then, at the top level of our program, we have
a task executor, where&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Generator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AsyncStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The task executor owns a collection of tasks and is responsible
for running them when they are ready.
When a task runs and needs to pend on some I/O, it yields
back what it’s currently waiting on, for example a file descriptor.
When none of the tasks can make any progress, the executor calls
a OS-specific API like &lt;code class=&quot;highlighter-rouge&quot;&gt;kevent()&lt;/code&gt; to wait until more progress can be made.&lt;/p&gt;

&lt;p&gt;Unlike with fibers/green threading, it remains very clear where
switches-between-tasks can take place.
Unlike with promises, we don’t have to be constantly allocating closures
on the heap. Generator-based async-I/O seems like an all-around win!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.reddit.com/r/rust/comments/4li9v2/generators_are_the_missing_piece_for_async/&quot;&gt;(discussion on /r/rust)&lt;/a&gt;&lt;/p&gt;
</description>
                                <pubDate>Sat, 28 May 2016 00:00:00 -0400</pubDate>
                                <link>http://dwrensha.github.io/capnproto-rust/2016/05/28/async-generators.html</link>
                                <guid isPermaLink="true">http://dwrensha.github.io/capnproto-rust/2016/05/28/async-generators.html</guid>
                        </item>
                
                        <item>
                                <title>gj I/O split into its own crate</title>
                                <description>&lt;p&gt;Version 0.2.0 of the &lt;a href=&quot;https://github.com/dwrensha/gj&quot;&gt;Good Job Event Loop&lt;/a&gt;
is now &lt;a href=&quot;https://crates.io/crates/gj&quot;&gt;live on crates.io&lt;/a&gt;.
The major change in this release is that all of the
I/O code has been split out into a separate crate
called
&lt;a href=&quot;https://github.com/dwrensha/gjio&quot;&gt;gjio&lt;/a&gt;.
The main gj crate still defines the core &lt;code class=&quot;highlighter-rouge&quot;&gt;Promise&lt;/code&gt;
and &lt;code class=&quot;highlighter-rouge&quot;&gt;EventLoop&lt;/code&gt; structures,
but gjio implements all the specifics about how events are
received from the outside world.
The &lt;a href=&quot;https://docs.rs/gjio/0.1.3/gjio/struct.EventPort.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;EventPort&lt;/code&gt;&lt;/a&gt; trait
is the hook that allows gj to use those specifics.
If for whatever reason you decide you don’t like gjio, you can write your own
&lt;code class=&quot;highlighter-rouge&quot;&gt;EventPort&lt;/code&gt; impelemention and still use gj.&lt;/p&gt;

&lt;p&gt;As I’ve moved the &lt;code class=&quot;highlighter-rouge&quot;&gt;gj::io&lt;/code&gt; module into its own crate,
I’ve taken the opportunity to iterate somewhat on the design.
Probably the most prominent change is
that the methods of &lt;a href=&quot;https://docs.rs/gjio/0.1.3/gjio/trait.AsyncRead.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AsyncRead&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&quot;https://docs.rs/gjio/0.1.3/gjio/trait.AsyncWrite.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AsyncWrite&lt;/code&gt;&lt;/a&gt;
now take &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt; by reference
rather than by move, which I think is an ergnomonic win.
Judge for yourself by checking out the
&lt;a href=&quot;https://github.com/dwrensha/gj/blob/v0.1.2/examples/echo.rs&quot;&gt;old version&lt;/a&gt;
and the
&lt;a href=&quot;https://github.com/dwrensha/gjio/blob/v0.1.0/examples/echo.rs&quot;&gt;new version&lt;/a&gt;
of a TCP echo example.&lt;/p&gt;

&lt;p&gt;A notable under-the-hood change is that, unlike the old &lt;code class=&quot;highlighter-rouge&quot;&gt;gj:io&lt;/code&gt; module,
the new gjio crate implements its own custom low level
&lt;a href=&quot;https://github.com/dwrensha/gjio/blob/v0.1.0/src/sys/unix/epoll.rs&quot;&gt;system&lt;/a&gt;
&lt;a href=&quot;https://github.com/dwrensha/gjio/blob/v0.1.0/src/sys/unix/kqueue.rs&quot;&gt;specific&lt;/a&gt;
&lt;a href=&quot;https://github.com/dwrensha/gjio/blob/v0.1.0/src/sys/windows/mod.rs&quot;&gt;code&lt;/a&gt;
for calling the non-blocking I/O interfaces of Linux, OSX, and Windows.
Doing so requires less code than you might think,
especially because native nonblocking I/O model on Windows
is a good match for the completion-based interfaces of gjio’s
&lt;code class=&quot;highlighter-rouge&quot;&gt;AsyncRead&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;AsyncWrite&lt;/code&gt;.&lt;/p&gt;

</description>
                                <pubDate>Sun, 24 Apr 2016 00:00:00 -0400</pubDate>
                                <link>http://dwrensha.github.io/capnproto-rust/2016/04/24/gj-io-split.html</link>
                                <guid isPermaLink="true">http://dwrensha.github.io/capnproto-rust/2016/04/24/gj-io-split.html</guid>
                        </item>
                
                        <item>
                                <title>RPC system rewritten to use async I/O</title>
                                <description>&lt;p&gt;Today I’ve released
verson 0.6 of the three main Cap’n Proto crates:
the &lt;a href=&quot;https://crates.io/crates/capnp/&quot;&gt;runtime&lt;/a&gt;,
the &lt;a href=&quot;https://crates.io/crates/capnpc/&quot;&gt;code generator&lt;/a&gt;,
and the &lt;a href=&quot;https://crates.io/crates/capnp-rpc/&quot;&gt;remote procedure call system&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The biggest change is that the RPC system
is now asynchronous, built on top of the &lt;a href=&quot;https://crates.io/crates/gj/&quot;&gt;GJ&lt;/a&gt;
event loop library.&lt;/p&gt;

&lt;h3 id=&quot;promises&quot;&gt;promises&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://capnproto.org/rpc.html&quot;&gt;Cap’n Proto’s RPC protocol&lt;/a&gt;
allows method calls to be made on distributed objects.
It has a built-in notion of pipelining that can minimize network round-trips,
and it allows object references to be
transmitted within messages, alongside plain-old-data.&lt;/p&gt;

&lt;p&gt;Such a system has an inherent need
to deal with concurrency,
both in its internal implementation in its publicly-exposed interfaces.&lt;/p&gt;

&lt;p&gt;For example, it’s common for a user to want to implement an
RPC method that makes a bunch of other RPC calls
and then collects their results
before returning.
How should these actions compose?
In the new version of &lt;code class=&quot;highlighter-rouge&quot;&gt;capnp-rpc&lt;/code&gt;,
which uses GJ’s &lt;a href=&quot;https://docs.rs/gj/0.2.0/gj/struct.Promise.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Promise&lt;/code&gt;&lt;/a&gt; abstraction,
each of the inner method calls
returns a promise,
and those promises can be collected with &lt;code class=&quot;highlighter-rouge&quot;&gt;Promise::all()&lt;/code&gt;
to form a new promise which can then be returned from the outer method.&lt;/p&gt;

&lt;p&gt;To see more concretely what this kind of thing looks like,
take a look at the
&lt;a href=&quot;https://github.com/capnproto/capnproto-rust/tree/master/capnp-rpc/examples/calculator&quot;&gt;calculator example&lt;/a&gt;,
which also showcases some fancier features.
There are also some more-practical examples
in the form of &lt;a href=&quot;https://sandstorm.io&quot;&gt;Sandstorm&lt;/a&gt; apps:
a simple &lt;a href=&quot;https://github.com/dwrensha/sandstorm-rawapi-example-rust&quot;&gt;GET/PUT/DELETE server&lt;/a&gt;
and a &lt;a href=&quot;https://github.com/dwrensha/acronymy&quot;&gt;word game&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;error-handling&quot;&gt;error handling&lt;/h3&gt;

&lt;p&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;Promise&amp;lt;T, E&amp;gt;&lt;/code&gt; is essentially a deferred &lt;code class=&quot;highlighter-rouge&quot;&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt;,
so it should be no surprise that
today’s release pertains to
our &lt;a href=&quot;/capnproto-rust/2014/04/06/error-handling.html&quot;&gt;continuing&lt;/a&gt;
&lt;a href=&quot;/capnproto-rust/2015/03/21/error-handling-revisited.html&quot;&gt;story&lt;/a&gt;
about error handling.&lt;/p&gt;

&lt;p&gt;Last time, we described our switch to using &lt;code class=&quot;highlighter-rouge&quot;&gt;Result&amp;lt;T,E&amp;gt;&lt;/code&gt; pervasively,
so that we could return an &lt;code class=&quot;highlighter-rouge&quot;&gt;Err(e)&lt;/code&gt; on a decode error,
rather than panicking.
That switch had some costs:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;We now need to sprinkle &lt;code class=&quot;highlighter-rouge&quot;&gt;try!()&lt;/code&gt;s in our code, one for any time we dereference a Cap’n Proto pointer.&lt;/li&gt;
  &lt;li&gt;We also need to edit some return types from &lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt;,
and in some cases need to define helper functions so that &lt;code class=&quot;highlighter-rouge&quot;&gt;try!()&lt;/code&gt; has a place to return to.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In my opinion, (1) is not so bad, and it has the advantage of making control flow more clear.
The &lt;a href=&quot;https://github.com/rust-lang/rfcs/pull/243&quot;&gt;proposed &lt;code class=&quot;highlighter-rouge&quot;&gt;?&lt;/code&gt; operator&lt;/a&gt;
would make this even nicer.&lt;/p&gt;

&lt;p&gt;In the asynchronous world of Cap’n Proto RPC,
(2) becomes less of a hassle, because
most functions that need to read a Cap’n Proto message
are asynchronous, and therefore already return a &lt;code class=&quot;highlighter-rouge&quot;&gt;Promise&amp;lt;T, E&amp;gt;&lt;/code&gt;.
In such cases, we can use the &lt;a href=&quot;https://docs.rs/gj/0.2.0/gj/macro.pry!.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pry!()&lt;/code&gt;&lt;/a&gt;
macro that GJ defines. The &lt;code class=&quot;highlighter-rouge&quot;&gt;pry!()&lt;/code&gt; macro acts like &lt;code class=&quot;highlighter-rouge&quot;&gt;try!()&lt;/code&gt;, but in the early return case returns
&lt;code class=&quot;highlighter-rouge&quot;&gt;Promise::err(e)&lt;/code&gt; rather than &lt;code class=&quot;highlighter-rouge&quot;&gt;Result::Err(e)&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;a-simpler-error-type&quot;&gt;a simpler error type&lt;/h3&gt;

&lt;p&gt;One error-related question that often arises when designing interfaces that use &lt;code class=&quot;highlighter-rouge&quot;&gt;Promise&amp;lt;T,E&amp;gt;&lt;/code&gt; is:
what concrete error type should be plugged in for &lt;code class=&quot;highlighter-rouge&quot;&gt;E&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;In previous versions of capnproto-rust, I had defined an error enum &lt;code class=&quot;highlighter-rouge&quot;&gt;capnp::Error&lt;/code&gt;
with various cases, one of which wrapped a &lt;code class=&quot;highlighter-rouge&quot;&gt;std::io::Error&lt;/code&gt;.
This got me into trouble when I wanted to start using
&lt;a href=&quot;https://docs.rs/gj/0.2.0/gj/struct.Promise.html#method.fork&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Promise::fork()&lt;/code&gt;&lt;/a&gt;,
which requires that &lt;code class=&quot;highlighter-rouge&quot;&gt;E&lt;/code&gt; be &lt;a href=&quot;https://doc.rust-lang.org/stable/std/clone/trait.Clone.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Clone&lt;/code&gt;&lt;/a&gt;.
The problem is that &lt;code class=&quot;highlighter-rouge&quot;&gt;std::io::Error&lt;/code&gt; is not &lt;code class=&quot;highlighter-rouge&quot;&gt;Clone&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;To address this problem, I have redefined &lt;code class=&quot;highlighter-rouge&quot;&gt;::capnp::Error&lt;/code&gt; to follow the design of
&lt;a href=&quot;https://github.com/sandstorm-io/capnproto/blob/master/c%2B%2B/src/kj/exception.h&quot;&gt;kj::Exception&lt;/a&gt;.
It’s now a very simple struct with a &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; description and an &lt;code class=&quot;highlighter-rouge&quot;&gt;ErrorKind&lt;/code&gt; enum,
where the only variants of
&lt;code class=&quot;highlighter-rouge&quot;&gt;ErrorKind&lt;/code&gt; are &lt;code class=&quot;highlighter-rouge&quot;&gt;Failed&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Disconnected&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Overloaded&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;Unimplemented&lt;/code&gt;.
The observation here is that there seems to be very little gained by
defining hierarchies of errors wrapping other errors.&lt;/p&gt;
</description>
                                <pubDate>Mon, 11 Jan 2016 00:00:00 -0500</pubDate>
                                <link>http://dwrensha.github.io/capnproto-rust/2016/01/11/async-rpc.html</link>
                                <guid isPermaLink="true">http://dwrensha.github.io/capnproto-rust/2016/01/11/async-rpc.html</guid>
                        </item>
                
                        <item>
                                <title>asynchronous I/O with promises</title>
                                <description>&lt;p&gt;My Rust &lt;a href=&quot;https://github.com/dwrensha/capnp-rpc-rust&quot;&gt;implementation&lt;/a&gt;
of the Cap’n Proto remote procedure call protocol
was designed in a bygone era.
Back then, Rust’s runtime library
provided thread-like “tasks”
that were backed by &lt;a href=&quot;https://github.com/alexcrichton/green-rs&quot;&gt;libgreen&lt;/a&gt;
and were therefore “cheap to spawn.”
These enabled
&lt;a href=&quot;http://en.wikipedia.org/wiki/Communicating_sequential_processes&quot;&gt;CSP&lt;/a&gt;-style
programming
with beautifully simple blocking I/O operations
that were, under the hood,
dispatched through &lt;a href=&quot;https://github.com/libuv/libuv&quot;&gt;libuv&lt;/a&gt;.
While the question of whether this model was actually efficient
was a matter of much &lt;a href=&quot;https://github.com/rust-lang/rfcs/pull/219&quot;&gt;discussion&lt;/a&gt;,
I personally enjoyed using it and found it
easy to reason about.&lt;/p&gt;

&lt;p&gt;For better or worse, the era of libgreen
&lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/0230-remove-runtime.md&quot;&gt;has ended&lt;/a&gt;.
Code originally written for libgreen can still work,
but because each “task” is now its own system-level thread,
calling them “lightweight” is more of a stretch than ever.
As I’ve maintained capnp-rpc-rust over the past year,
its need for a different approach to concurrency
has become increasingly apparent.&lt;/p&gt;

&lt;h2 id=&quot;introducing-gjhttpsgithubcomdwrenshagj&quot;&gt;Introducing &lt;a href=&quot;https://github.com/dwrensha/gj&quot;&gt;GJ&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dwrensha/gj&quot;&gt;GJ&lt;/a&gt; is a new Rust library that provides
abstractions for event-loop concurrency and asynchronous I/O,
aiming to meet the needs of Cap’n Proto RPC.
The main ideas in GJ are taken from
&lt;a href=&quot;https://capnproto.org/cxxrpc.html#kj-concurrency-framework&quot;&gt;KJ&lt;/a&gt;,
a C++ library that forms the foundation of capnproto-c++.
At &lt;a href=&quot;https://sandstorm.io&quot;&gt;Sandstorm&lt;/a&gt;, we have been
successfully using KJ-based concurrency
in our core infrastructure for a while now;
some examples you can look at include a
&lt;a href=&quot;https://github.com/sandstorm-io/sandstorm/blob/3a3e93eb142969125aa8573df4edc6c62efbeebe/src/sandstorm/sandstorm-http-bridge.c++&quot;&gt;bridge&lt;/a&gt; that translates between
HTTP and &lt;a href=&quot;https://github.com/sandstorm-io/sandstorm/blob/3a3e93eb142969125aa8573df4edc6c62efbeebe/src/sandstorm/web-session.capnp&quot;&gt;this Cap’n Proto interface&lt;/a&gt;,
and a
&lt;a href=&quot;https://github.com/sandstorm-io/sandstorm/blob/3a3e93eb142969125aa8573df4edc6c62efbeebe/src/sandstorm/fuse.c++&quot;&gt;Cap’n Proto driver&lt;/a&gt;
to a FUSE filesystem.&lt;/p&gt;

&lt;p&gt;The core abstraction in GJ is the &lt;code class=&quot;highlighter-rouge&quot;&gt;Promise&amp;lt;T&amp;gt;&lt;/code&gt;, representing
a computation that may eventually resolve to a value of type &lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt;.
Instead of blocking, any non-immediate operation in GJ
returns a promise that gets fulfilled upon the operation’s completion.
To use a promise, you register a callback with the &lt;code class=&quot;highlighter-rouge&quot;&gt;then()&lt;/code&gt; method.
For example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;connect_then_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;gj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NetworkAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                         &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;gj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;c&quot;&gt;// The connection has succeeded. Let&#39;s write some data.&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;vec!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;c&quot;&gt;// The first write has succeeded. Let&#39;s write some more.&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;vec!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;c&quot;&gt;// The second write has succeeded. Let&#39;s just return;&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;gj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fulfilled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Callbacks registered with &lt;code class=&quot;highlighter-rouge&quot;&gt;then()&lt;/code&gt; never move between threads, so they do
not need to be thread-safe.
In Rust jargon, the callbacks are &lt;code class=&quot;highlighter-rouge&quot;&gt;FnOnce&lt;/code&gt; closures that need not be &lt;code class=&quot;highlighter-rouge&quot;&gt;Send&lt;/code&gt;.
This means that you can share mutable data between them
without any need for mutexes or atomics. For example, to share a counter,
you could do this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ticker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Rc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;delay_ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;gj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;gj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Timer&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.after_delay_ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delay_ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;move&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|()|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;the counter is at: {}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ticker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delay_ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;two_tickers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;gj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Rc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Cell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;gj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join_promises&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;vec!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ticker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                                  &lt;span class=&quot;nf&quot;&gt;ticker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;750&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you do want to use multiple threads, GJ makes it easy to set up an
event loop in each and to communicate between them over streams of bytes.&lt;/p&gt;

&lt;p&gt;To learn more about what’s possible with GJ,
I encourage you to explore some of more complete
&lt;a href=&quot;https://github.com/dwrensha/gj/tree/master/examples&quot;&gt;examples&lt;/a&gt;
in the git repo.&lt;/p&gt;

&lt;h2 id=&quot;onwards&quot;&gt;Onwards!&lt;/h2&gt;

&lt;p&gt;Two things in particular have made working GJ especially fun so far:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;KJ is written in clean, modern C++ that translates nicely into idiomatic Rust.
The translation is fairly direct most of the time, and parts that don’t translate directly make
for fun puzzles! For one such nontrival translation, compare KJ’s
&lt;a href=&quot;https://github.com/sandstorm-io/capnproto/blob/6315eaed384199702240c8d1b8d8186ae55e24e9/c%2B%2B/src/kj/async-io.h#L54&quot;&gt;AsyncOutputStream&lt;/a&gt;
to GJ’s
&lt;a href=&quot;https://github.com/dwrensha/gj/blob/8156f3cc89af96024e1bc0001481b11e40bef0f5/src/io.rs#L55&quot;&gt;AsyncWrite&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;The excellent &lt;a href=&quot;https://github.com/carllerche/mio&quot;&gt;mio&lt;/a&gt; library allows us to not worry
about system-specific APIs. It provides a uniform abstraction on top of
&lt;code class=&quot;highlighter-rouge&quot;&gt;epoll&lt;/code&gt; on Linux and &lt;code class=&quot;highlighter-rouge&quot;&gt;kqueue&lt;/code&gt; on OSX, and maybe someday even &lt;code class=&quot;highlighter-rouge&quot;&gt;IOCP&lt;/code&gt; in Windows.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Although basics of GJ are operational today,
there’s still a lot of work left to do.
If this is a project that sounds interesting
or useful to you, I’d love to have your help!&lt;/p&gt;

</description>
                                <pubDate>Mon, 25 May 2015 00:00:00 -0400</pubDate>
                                <link>http://dwrensha.github.io/capnproto-rust/2015/05/25/asynchronous-io-with-promises.html</link>
                                <guid isPermaLink="true">http://dwrensha.github.io/capnproto-rust/2015/05/25/asynchronous-io-with-promises.html</guid>
                        </item>
                
                        <item>
                                <title>error handling revisited</title>
                                <description>&lt;p&gt;Last week I pushed some changes that
switch &lt;a href=&quot;https://www.github.com/dwrensha/capnproto-rust&quot;&gt;capnproto-rust&lt;/a&gt;
over to using return-value-based error handling.
In particular, we no longer use the
default value fallback strategy discussed in
&lt;a href=&quot;/capnproto-rust/2014/04/06/error-handling.html&quot;&gt;this previous post&lt;/a&gt;.
Now any method that might fail on malformed
input returns a &lt;code class=&quot;highlighter-rouge&quot;&gt;::std::result::Result&amp;lt;T, ::capnp::Error&amp;gt;&lt;/code&gt;
instead of a bare &lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;These changes remove a lot of complexity and
have allowed me to delete a significant amount of code.
They also provide, I think, a more honest interface for
users of the library.
Now the type signatures of the getter methods
make it clear exactly where input validation errors
are possible.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;try!()&lt;/code&gt; macro makes it easy enough to deal
with such errors in a principled manner.&lt;/p&gt;

&lt;p&gt;Here is what a small example looks like after the changes:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_address_book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;address_book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;address_book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;capnp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;try!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address_book&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.get_people&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{}: {}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;try!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.get_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()),&lt;/span&gt;
                           &lt;span class=&quot;nd&quot;&gt;try!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.get_email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()));&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phone&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;try!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.get_phones&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phone&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.get_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;phone_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mobile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;mobile&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;phone_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Home&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;home&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;phone_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Work&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;work&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;Err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;capnp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;NotInSchema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;UNKNOWN&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
            &lt;span class=&quot;nd&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;  {} phone: {}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                     &lt;span class=&quot;n&quot;&gt;type_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;try!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;phone&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.get_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()));&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.get_employment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.which&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;employment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Unemployed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nd&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;  unemployed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;employment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Employer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;employer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
               &lt;span class=&quot;nd&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;  employer: {}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;try!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;employer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;employment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;School&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;school&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nd&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;  student at: {}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;try!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;school&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;employment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SelfEmployed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nd&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;  self-employed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;Err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;capnp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;NotInSchema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(())&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice that there are in fact two types of errors being dealt with here.
There is &lt;code class=&quot;highlighter-rouge&quot;&gt;::capnp::Error&lt;/code&gt;, which gets returned
when a malformed pointer field is encountered in the encoded message.
There is also &lt;code class=&quot;highlighter-rouge&quot;&gt;::capnp::NotInSchema&lt;/code&gt;, which indicates that
an enumerant or union discriminant value was
outside of the range defined in the schema.
The second type of error can occur if
the encoded data was constructed using a newer version of the schema.
Instead of ignoring such cases, as in the above code, we might instead
wish to propagate their errors.
Because &lt;code class=&quot;highlighter-rouge&quot;&gt;::capnp::Error&lt;/code&gt; implements &lt;code class=&quot;highlighter-rouge&quot;&gt;::std::error::FromError&amp;lt;::capnp::NotInSchema&amp;gt;&lt;/code&gt;,
we can easily accomplish that using the &lt;code class=&quot;highlighter-rouge&quot;&gt;try!()&lt;/code&gt; macro:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;            &lt;span class=&quot;c&quot;&gt;//...&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;try!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;phone&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.get_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nn&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;phone_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mobile&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;mobile&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;nn&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;phone_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Home&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;home&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;nn&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;phone_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Work&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;work&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A year ago when I wrote the previous post on error handling,
the main reason that I decided not to go with return-value-based
error handling was that I thought it felt too heavyweight.
My sense now is that the &lt;code class=&quot;highlighter-rouge&quot;&gt;try!()&lt;/code&gt; macro and &lt;code class=&quot;highlighter-rouge&quot;&gt;FromError&lt;/code&gt; trait
can make things quite usable.&lt;/p&gt;
</description>
                                <pubDate>Sat, 21 Mar 2015 00:00:00 -0400</pubDate>
                                <link>http://dwrensha.github.io/capnproto-rust/2015/03/21/error-handling-revisited.html</link>
                                <guid isPermaLink="true">http://dwrensha.github.io/capnproto-rust/2015/03/21/error-handling-revisited.html</guid>
                        </item>
                
                        <item>
                                <title>custom mutable reference types</title>
                                <description>&lt;p&gt;Rust’s &lt;em&gt;mutable references&lt;/em&gt; provide exclusive access to writable locations in memory.
If we have &lt;code class=&quot;highlighter-rouge&quot;&gt;x : &amp;amp;&#39;a mut T&lt;/code&gt;,
then we know that the referred-to &lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt;
cannot be read or modified except through dereferencing &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt;.
In other words, &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; can have no aliases.
This guarantee is
crucial for memory safety,
as it implies that
any mutations we apply through
&lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; have no risk of invalidating references held
elsewhere in our program.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Builder&lt;/code&gt; types
of &lt;a href=&quot;https://github.com/dwrensha/capnproto-rust&quot;&gt;capnproto-rust&lt;/a&gt;
also need to provide an exclusivity guarantee.
Recall that if &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo&lt;/code&gt; is a struct defined in a Cap’n Proto schema,
then a &lt;code class=&quot;highlighter-rouge&quot;&gt;foo::Builder&amp;lt;&#39;a&amp;gt;&lt;/code&gt;
provides access to a writable location
in arena-allocated memory that contains
a &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo&lt;/code&gt; in &lt;a href=&quot;https://kentonv.github.io/capnproto/encoding.html&quot;&gt;Cap’n Proto format&lt;/a&gt;.
To protect access to that memory, a &lt;code class=&quot;highlighter-rouge&quot;&gt;foo::Builder&amp;lt;&#39;a&amp;gt;&lt;/code&gt; ought to behave
as if it were a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&#39;a mut Foo&lt;/code&gt;,
even though the &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo&lt;/code&gt; type
cannot directly exist in Rust
(because Cap’n Proto struct layout
differs from Rust struct layout).&lt;/p&gt;

&lt;p&gt;So the question arises: how do we define custom mutable references?&lt;/p&gt;

&lt;p&gt;As we’ll see, the easy part is ensuring exclusive access,
which can be achieved simply by not
implementing the &lt;code class=&quot;highlighter-rouge&quot;&gt;Copy&lt;/code&gt; trait for &lt;code class=&quot;highlighter-rouge&quot;&gt;foo::Builder&amp;lt;&#39;a&amp;gt;&lt;/code&gt;.
The tricky part is making it ergonomic to reuse a reference,
something that built-in mutable references achieve through
special &lt;em&gt;automatic reborrowing&lt;/em&gt; semantics. Our custom references
can use similar semantics, but they need to be slightly more explicit about it.&lt;/p&gt;

&lt;p&gt;Okay, let’s get concrete. Suppose that &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo&lt;/code&gt; is defined in a Cap’n Proto schema like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct Foo {
  x @0 : Float32;
  blob @1 : Data;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;When we call &lt;code class=&quot;highlighter-rouge&quot;&gt;capnp compile -orust foo.capnp&lt;/code&gt;, we get generated code
containing the following definitions:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mod foo {
  pub struct Builder&amp;lt;&#39;a&amp;gt; {...}

  impl &amp;lt;&#39;a&amp;gt; Builder&amp;lt;&#39;a&amp;gt; {
    pub fn get_x(self) -&amp;gt; f32 {...}
    pub fn set_x(&amp;amp;mut self, value : f32) {...}
    pub fn get_blob(self) -&amp;gt; ::capnp::data::Builder&amp;lt;&#39;a&amp;gt; {...}
    pub fn set_blob(&amp;amp;mut self, value : ::capnp::data::Reader) {...}
    pub fn init_blob(self, length : u32) -&amp;gt; ::capnp::data::Builder&amp;lt;&#39;a&amp;gt; {...}
    ...
  }
  ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You see here the usual accessor methods that allow us to
read and modify a &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo&lt;/code&gt;.
Note that the &lt;code class=&quot;highlighter-rouge&quot;&gt;get_&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;init_&lt;/code&gt; methods take a by-value &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt;
parameter.
This ensures that at most one &lt;code class=&quot;highlighter-rouge&quot;&gt;::capnp::data::Builder&lt;/code&gt; referring to the &lt;code class=&quot;highlighter-rouge&quot;&gt;blob&lt;/code&gt; field
can be obtained.
For example, if we call &lt;code class=&quot;highlighter-rouge&quot;&gt;foo.init_blob()&lt;/code&gt; then we cannot later call &lt;code class=&quot;highlighter-rouge&quot;&gt;foo.get_blob()&lt;/code&gt;,
because &lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt; &lt;em&gt;moves into&lt;/em&gt; the first call
and cannot be used again.
As the &lt;code class=&quot;highlighter-rouge&quot;&gt;::capnp::data::Builder&amp;lt;&#39;a&amp;gt;&lt;/code&gt; type is in fact just a typedef for &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&#39;a mut [u8]&lt;/code&gt;,
it should be extra clear here why exclusivity is important to maintain.&lt;/p&gt;

&lt;p&gt;One thing we might do with these accessors is
initialize the &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo&lt;/code&gt; and return a reference to its interior,
as does this function:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fn init_and_return_slice&amp;lt;&#39;a&amp;gt;(foo : foo::Builder&amp;lt;&#39;a&amp;gt;) -&amp;gt; &amp;amp;&#39;a mut [u8] {
    foo.init_blob(100).slice_mut(5, 10)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;But what if we want to call this function and
then afterwards call &lt;code class=&quot;highlighter-rouge&quot;&gt;set_x()&lt;/code&gt;?
We might write something like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fn do_some_things_wrong&amp;lt;&#39;a&amp;gt;(mut foo : foo::Builder&amp;lt;&#39;a&amp;gt;) {
   {
     let slice = init_and_return_slice(foo);
     slice[0] = 42;
   }
   foo.set_x(1.23);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;but if we try to compile this function, we get the following typecheck error:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;main.rs:19:9: 19:12 error: use of moved value: `foo`
main.rs:19         foo.set_x(1.23);
                   ^~~
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The same pass-by-move semantics that were essential to preventing
aliasing have now become a problem.
We would like to be
able to borrow &lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt; for just the inner block,
and then reuse it for the final line.
If &lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt; were a built-in mutable reference, such a &lt;em&gt;reborrow&lt;/em&gt;
would take place automatically, and everything would just work.
Fortunately, we can make do with our custom mutable reference
if we use the following following function,
which is also included in the generated code:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mod foo {
  ...
  impl &amp;lt;&#39;a&amp;gt; Builder &amp;lt;&#39;a&amp;gt; {
    pub fn borrow&amp;lt;&#39;b&amp;gt;(&amp;amp;&#39;b mut self) -&amp;gt; Builder&amp;lt;&#39;b&amp;gt; { ... }
  }
  ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Using this, we can write our function as follows, and it successfully typechecks.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fn do_some_things_right&amp;lt;&#39;a&amp;gt;(mut foo : foo::Builder&amp;lt;&#39;a&amp;gt;) {
    {
        let slice = init_and_return_slice(foo.borrow());
        slice[0] = 42
    }
    foo.set_x(1.23);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So it appears that the main inconviences of using our custom mutable references
compared to built-in mutable references
is that we need to add some calls to &lt;code class=&quot;highlighter-rouge&quot;&gt;.borrow()&lt;/code&gt; and maybe add some &lt;code class=&quot;highlighter-rouge&quot;&gt;mut&lt;/code&gt;’s to some bindings.
In fact, it seems to me that it would be possible for Rust to support
a built-in &lt;code class=&quot;highlighter-rouge&quot;&gt;Reborrow&lt;/code&gt; trait that could eliminate even these
inconveniences.&lt;/p&gt;

&lt;p&gt;Finally, in case you’re wondering why we prefer by-move &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt; over &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;mut self&lt;/code&gt;
in our generated accessor methods, suppose that we also define this type in our schema:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct Bar {
  oneFoo @0 : Foo;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Using by-move &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt; allows us to return references deep in the interior of a &lt;code class=&quot;highlighter-rouge&quot;&gt;Bar&lt;/code&gt;, like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fn init_field_and_return_slice&amp;lt;&#39;a&amp;gt;(bar : bar::Builder&amp;lt;&#39;a&amp;gt;) -&amp;gt; &amp;amp;&#39;a mut [u8] {
    bar.init_one_foo().init_blob(100).slice_mut(5, 10)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If &lt;code class=&quot;highlighter-rouge&quot;&gt;init_blob()&lt;/code&gt; instead took a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;mut self&lt;/code&gt; parameter, this function would fail to typecheck
because the &lt;code class=&quot;highlighter-rouge&quot;&gt;foo::Builder&lt;/code&gt; returned by &lt;code class=&quot;highlighter-rouge&quot;&gt;bar.init_one_foo()&lt;/code&gt; does not live long enough.&lt;/p&gt;

&lt;h4 id=&quot;update-26-march-2018-a-nameupdatea&quot;&gt;update (26 March 2018) &lt;a name=&quot;update&quot;&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;borrow()&lt;/code&gt; method has been &lt;a href=&quot;https://github.com/capnproto/capnproto-rust/pull/91/commits/aafa9514c7ff37b0702d45b42bd129d6e39e99c8&quot;&gt;renamed&lt;/a&gt;
to &lt;code class=&quot;highlighter-rouge&quot;&gt;reborrow()&lt;/code&gt;.&lt;/p&gt;

</description>
                                <pubDate>Sat, 27 Dec 2014 00:00:00 -0500</pubDate>
                                <link>http://dwrensha.github.io/capnproto-rust/2014/12/27/custom-mutable-references.html</link>
                                <guid isPermaLink="true">http://dwrensha.github.io/capnproto-rust/2014/12/27/custom-mutable-references.html</guid>
                        </item>
                
        </channel>
</rss>
